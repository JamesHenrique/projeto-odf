import subprocess
import psutil
from time import sleep as sp
from pywinauto import Application
import time

PATH_EXECUTAVEL = r"\\SERVIDORDELL\FCerta\fcerta.exe"

def fechar_janelas_fc_receitas():
    """
    Fecha todas as janelas abertas do FCReceitas antes de encerrar o processo.
    Evita que abas abertas causem problemas no pr√≥ximo login.
    """
    pid = obter_pid_fc_receitas()
    if not pid:
        print("‚ÑπÔ∏è FCReceitas n√£o est√° em execu√ß√£o.")
        return True
    
    try:
        print("üîç Verificando janelas abertas do FCReceitas...")
        app = Application(backend="uia").connect(process=pid, timeout=5)
        janelas = app.windows()
        
        janelas_fechadas = 0
        for janela in janelas:
            try:
                titulo = janela.window_text()
                if "f√≥rmulacerta" in titulo.lower():
                    print(f"üóëÔ∏è Fechando janela: {titulo}")
                    janela.close()
                    janelas_fechadas += 1
                    sp(0.5)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao fechar janela: {e}")
                continue
        
        if janelas_fechadas > 0:
            print(f"‚úÖ {janelas_fechadas} janela(s) do FCReceitas fechada(s)")
            sp(1)  # Aguarda confirma√ß√£o do fechamento
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao manipular janelas FCReceitas: {e}")
        return True  # Continua mesmo com erro

def closed_fcerta():
    """
    Fecha completamente o F√≥rmula Certa e FCReceitas.
    Garante que todas as janelas e processos sejam encerrados.
    """
    print("üîÑ Iniciando fechamento do F√≥rmula Certa...")
    
    # Primeiro fecha as janelas abertas do FCReceitas
    fechar_janelas_fc_receitas()
    sp(1)
    
    processos_fechados = 0
    
    # Fecha FCReceitas.exe
    for processo in psutil.process_iter(['pid', 'name']):
        try:
            nome = processo.info['name']
            if nome and nome.lower() in ['fcreceitas.exe', 'fcreceitas']:
                print(f"üóëÔ∏è Encerrando processo: {nome}")
                processo.terminate()
                processo.wait(timeout=3)
                processos_fechados += 1
                print("‚úÖ FCReceitas foi fechado.")
        except (psutil.NoSuchProcess, psutil.TimeoutExpired, psutil.AccessDenied) as e:
            print(f"‚ö†Ô∏è Erro ao fechar FCReceitas: {e}")
            continue
    
    sp(1)
    
    # Fecha fcerta.exe
    for processo in psutil.process_iter(['pid', 'name']):
        try:
            nome = processo.info['name']
            if nome and nome.lower() in ['fcerta.exe', 'fcerta']:
                print(f"üóëÔ∏è Encerrando processo: {nome}")
                processo.terminate()
                processo.wait(timeout=3)
                processos_fechados += 1
                print("‚úÖ F√≥rmula Certa foi fechado.")
        except (psutil.NoSuchProcess, psutil.TimeoutExpired, psutil.AccessDenied) as e:
            print(f"‚ö†Ô∏è Erro ao fechar F√≥rmula Certa: {e}")
            continue
    
    if processos_fechados > 0:
        print(f"‚úÖ Total: {processos_fechados} processo(s) encerrado(s)")
        return True
    else:
        print("‚ÑπÔ∏è Nenhum processo do F√≥rmula Certa estava em execu√ß√£o.")
        return False

def verifica_fcerta():
    """
    Verifica se o processo fcerta.exe est√° em execu√ß√£o.
    """
    for processo in psutil.process_iter(['pid', 'name']):
        try:
            nome = processo.info['name']
            if nome and nome.lower() in ['fcerta.exe', 'fcerta']:
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return False


def obter_pid_fc_receitas():
    """
    Retorna o PID do processo FCReceitas.exe, se estiver em execu√ß√£o.
    """
    for p in psutil.process_iter(['pid', 'name']):
        try:
            nome = p.info['name']
            if nome and nome.lower() in ['fcreceitas.exe', 'fcreceitas']:
                return p.info['pid']
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return None


def verificar_aba_orcamento_disponivel():
    """
    Verifica se a aba de Or√ßamento est√° dispon√≠vel no FCReceitas.
    Retorna True se encontrada e focada, False caso contr√°rio.
    """
    pid = obter_pid_fc_receitas()
    if not pid:
        print("‚ÑπÔ∏è FCReceitas n√£o est√° em execu√ß√£o.")
        return False
    
    try:
        print("üîç Verificando abas do FCReceitas...")
        app = Application(backend="uia").connect(process=pid, timeout=5)
        janelas = app.windows()
        
        for janela in janelas:
            try:
                titulo = janela.window_text()
                if "f√≥rmulacerta" in titulo.lower():
                    print(f"ü™ü Encontrada janela: {titulo}")
                    
                    # Prioriza aba de Or√ßamentos
                    if "or√ßamento" in titulo.lower():
                        print(f"‚úÖ Aba de Or√ßamento encontrada: {titulo}")
                        janela.restore()
                        janela.set_focus()
                        sp(0.5)
                        return True
                    
                    # Aceita tamb√©m Receitas como alternativa
                    elif "receita" in titulo.lower():
                        print(f"‚ÑπÔ∏è Aba de Receitas encontrada: {titulo}")
                        janela.restore()
                        janela.set_focus()
                        sp(0.5)
                        return True
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao verificar janela: {e}")
                continue
        
        print("‚ùå Nenhuma aba de Or√ßamento ou Receitas encontrada")
        return False
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao conectar ao FCReceitas: {e}")
        return False


def manipular_janelas_fc_receitas():
    """
    Manipula janelas do FCReceitas, priorizando a aba de Or√ßamentos.
    """
    pid = obter_pid_fc_receitas()
    if not pid:
        print("‚ö†Ô∏è FCReceitas n√£o est√° aberto.")
        return False

    try:
        app = Application(backend="uia").connect(process=pid, timeout=5)
        janelas = app.windows()

        # Primeira passagem: procura por Or√ßamentos
        for janela in janelas:
            try:
                titulo = janela.window_text()
                if "f√≥rmulacerta" in titulo.lower() and "or√ßamento" in titulo.lower():
                    print(f"‚úÖ Aba de Or√ßamentos encontrada: {titulo}")
                    janela.restore()
                    janela.set_focus()
                    sp(0.5)
                    return True
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao manipular janela: {e}")
                continue

        # Segunda passagem: procura por Receitas
        for janela in janelas:
            try:
                titulo = janela.window_text()
                if "f√≥rmulacerta" in titulo.lower() and "receita" in titulo.lower():
                    print(f"‚ÑπÔ∏è Aba de Receitas encontrada: {titulo}")
                    janela.restore()
                    janela.set_focus()
                    sp(0.5)
                    return True
            except Exception as e:
                continue

        print("‚ùå Nenhuma janela de Or√ßamentos ou Receitas encontrada.")
        return False

    except Exception as e:
        print(f"‚ùå Erro ao manipular janelas: {e}")
        return False


def login_fcerta():
    """
    Inicia o processo do F√≥rmula Certa.
    """
    path_executavel = PATH_EXECUTAVEL

    try:
        processo = subprocess.Popen(path_executavel)
        print("‚úÖ INICIANDO F√≥rmula Certa...")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao iniciar F√≥rmula Certa: {e}")
        return False


def reiniciar_fcerta():
    """
    Reinicia o F√≥rmula Certa completamente.
    Garante que todos os processos e janelas sejam fechados antes de reiniciar.
    Previne loops infinitos verificando o estado ap√≥s cada etapa.
    """
    print('üîÑ REINICIANDO F√≥rmula Certa...')
    
    # Etapa 1: Fechar tudo
    if not closed_fcerta():
        print("‚ÑπÔ∏è F√≥rmula Certa n√£o estava em execu√ß√£o.")
    
    # Etapa 2: Aguardar fechamento completo
    print("‚è≥ Aguardando 10 segundos para fechamento completo...")
    sp(10)
    
    # Etapa 3: Verificar se realmente fechou (prote√ß√£o anti-loop)
    tentativas_verificacao = 0
    max_tentativas_verificacao = 3
    
    while verifica_fcerta() and tentativas_verificacao < max_tentativas_verificacao:
        tentativas_verificacao += 1
        print(f"‚ö†Ô∏è F√≥rmula Certa ainda est√° em execu√ß√£o. Tentativa {tentativas_verificacao}/{max_tentativas_verificacao}")
        
        # For√ßa fechamento novamente
        closed_fcerta()
        sp(5)
    
    if verifica_fcerta():
        print("‚ùå ERRO: N√£o foi poss√≠vel fechar o F√≥rmula Certa completamente.")
        return False
    
    # Etapa 4: Iniciar novamente
    print("üöÄ Iniciando F√≥rmula Certa...")
    if not login_fcerta():
        print("‚ùå ERRO: Falha ao iniciar F√≥rmula Certa.")
        return False
    
    # Etapa 5: Aguardar inicializa√ß√£o
    print("‚è≥ Aguardando inicializa√ß√£o (5 segundos)...")
    sp(5)
    
    # Etapa 6: Verificar se iniciou corretamente (prote√ß√£o anti-loop)
    if not verifica_fcerta():
        print("‚ùå ERRO: F√≥rmula Certa n√£o iniciou corretamente.")
        return False
    
    print("‚úÖ F√≥rmula Certa reiniciado com sucesso!")
    return True


